# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Todo @model {
  id: ID!
  name: String!
  description: String
}

# defined status for the animal
# rainbow bridge for dead animal
# owned when animal has an owner
# transient if the animal is not a campus animal but is seen within the vicinity of the campus
# on campus is for animals that are considered as up dogs
# adopted animal is for animals that are formerly on campus dogs that are adopted
enum AnimalStatus {
    RAINBOW_BRIDGE,
    OWNED,
    TRANSIENT,
    ON_CAMPUS,
    ADOPTED
}

# species of animals
# limited to dog and cat
enum AnimalSpecies {
    DOG,
    CAT
}

# defined sex for the animals
# unknown is for animals with unconfirmed sex
enum AnimalSex {
    MALE,
    FEMALE,
    UNKNOWN
}

# add the qr code string here
# convert the hexadeximal string to string

# required keys:
# id
# location
# name
# animalsex
# animal species
# 
type Animal @model{
  id: ID!
  location: String!
  mainName: String!
  sex: AnimalSex!
  status: [AnimalStatus!]!
  coatColor: [String!]
  localImgDir: String
  notes:[String!]
  species: AnimalSpecies!
  traitsAndPersonality: [String!]
  disabilities: [String!]
  age: Int @default(value: "-1")
  sterilizationDate: AWSDate
}
# interface for the personal information of the user
#cmplteHomeAdd and cmplteCurrentAdd refers to complete home address and complete current address respectively
type AdopterBasicPersonalInfo {
  fname: String!
  lname: String!
  age: Int!
  isStudent: Boolean!
  contactNum: String!
  emailAdd: String!
  facebookLink: String!
  cmpltHomeAdd: String!
  cmpltCurrentAdd: String!
}
# interface for the adoptor's pet history
type AdopterPetHistory {
  noOfPets: Int!
  # make it a string to provide flexibility to the answers of the users
  yearsOfBeingPetOwner: String!
  oldestPetAge: Int!
  strlztnAwareness: NeuterSpayStatus!
  strlztnWillingness: Boolean!
  regVetClinic: String!
}
# list of acceptable values for the strlznAwareness
enum NeuterSpayStatus {
  YES_FOR_BOTH,
  YES_FOR_NEUTER_ONLY,
  YES_FOR_SPAYING_ONLY,
  NO_FOR_BOTH,
}
# interface for the planned housing/accomodation of the will be adopted animal
type PetAccommodation{
  adoptionDestination: String!
  indoorOutdoor: String!
  cagedLeashed: String!
}
# other information about the adopter
type AdopterOtherInfo{
  basicNecesities: [String!]!
  enrichmentAct: String!
  discoverySource: String
}
type AdoptionRequest @model {
  id: ID!
  basicPersonalInfo: AdopterBasicPersonalInfo!
  petHistory: AdopterPetHistory!
  otherInfo: AdopterOtherInfo!
  idImageUrl: String!
}

# event object
type Event @model {
  id: ID!
  imgURL: String
  location: String!
  name: String!
  eventDate: AWSDate!
  eventTime: AWSTime!
  description: String!
}